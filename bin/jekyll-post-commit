#!/usr/bin/env ruby

require 'cgi'
require 'git'
require 'optparse'
require 'fileutils'

args = {}
OptionParser.new do |opts|
    opts.banner = "Usage: post-commit [options]"

    opts.on("-c COMMIT", "--commit COMMIT", "Commit hash or HEAD offset. If not set then the latest commit is used.") { |c| args[:commit] = c }
    opts.on("-p PROJECT", "--project PROJECT", "Directory where the .git folder is. If not set then the path to the command is used.") { |p| args[:project] = p }
    opts.on("-o OUTPUT", "--output OUTPUT", "Directory to write the generated file to. If not set then the cwd is used.") { |o| args[:output] = o }
    opts.on("-i", "--install-hook", "Install this hook into the --project directory") { |o|
        unless args.key?(:project)
            puts "No --project directory specified. Please set a project directory to install to.\n"
            puts opts
            exit 1
        end
        args[:install_hook] = o
    }
    opts.on("-h", "--help", "Display this help") { |h|
        puts opts
        exit 0
    }
end.parse!

# Attempt to find the project root. If it isn't specified and 
# there is a .git directory in our current path. Hop up until 
# we get to the same directory level as the .git folder.
root = Dir.pwd
if args.key?(:project)
    root = File.expand_path(args[:project])
elsif root.include?('/.git')
    root.split('/').reverse.each { |s|
        root += '/..'
        break if s == '.git'
    }
end

unless Dir.exist?(root + "/.git")
    puts "No .git directory found. Either use the -p option or execute this command in a project directory."
    exit 0
end

# If this is a hook installation then perform that and exit.
if args.key?(:install_hook)
    root += "/.git/hooks/post-commit"
    FileUtils.cp(File.expand_path(__FILE__), root)
    puts "Successfully installed #{root} hook"
    exit 0;
end

git = Git.open(root)

commit = args.key?(:commit) ? git.gcommit(args[:commit]) : git.log.first
body = commit.message
params = {}

match = body.match(/^(.*)\{BLOG(.*?)\}\s*$/im)
# If we match, then parse the params 
if !match.nil?
    body = match[1]
    params = CGI::parse(match[2].strip)
    params.each { |k, v| params[k] = v[0] if v.is_a?(Array) }
# If we don't match and no commit was
# specified then there's nothing to do.
elsif !args.key?(:commit)
    exit 0
end

# Attempt to separate a title from the body
parts = body.match(/^(.*?)(?:\r|\n|\r\n){2}(.*)$/m);

# If we can't separate a title from the body then 
# just use the first 60 chars of the body
title = body[0...60].strip
if !parts.nil? && parts.length >= 3
    title = parts[1].strip
    body = parts[2].strip
end
filename = args.key?(:output) ? File.expand_path(args[:output]) + '/' : ''
filename += git.log[0].date.strftime("%Y-%m-%d") + '-' + title.downcase.gsub(' ', '-').gsub(/[^\w-]/, '') + '.md'

puts "Creating Jekyll file #{filename}"

# Add some default front matter fields.
# These can be overwritten by set values.
frontmatter = {
    "layout" => '"post"',
    "author" => "\"#{commit.author.name}\"",
    "title" => "\"#{title}\"",
    "date" => '"' + commit.date.strftime("%Y-%m-%d %H:%M:%S") + '"',
}.merge(params)

post = File.open(filename, 'w+')
post.puts('---')
frontmatter.each { |k, v| post.puts "#{k}: #{v}" }
post.puts('---')
post.puts('')
post.puts(body)

post.close